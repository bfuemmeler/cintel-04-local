[{"name": "app.py", "content": "from shiny import reactive         \nfrom shiny.express import ui, render, input\nfrom shinywidgets import render_plotly\n\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nfrom palmerpenguins import load_penguins\n\npenguins = load_penguins()\nui.page_opts(title=\"Brenda's Penguin Data\", fillable=True)\n\n# Sidebar \nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Palmer Penguins Sidebar\")\n    ui.input_selectize(\n        \"selected_attribute\", \"Choose attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n        selected=\"bill_length_mm\",\n    )\n    ui.input_slider(\"n_bins\", \"Seaborn bins\", 1, 100, 30)\n    ui.input_checkbox_group(\n        \"selected_species\", \"Species in table\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        inline=True,\n    )\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly bins\", 30, min=5, max=100)\n    ui.hr()\n    ui.a(\"Brenda's GitHub Repo\",\n         href=\"https://github.com/bfuemmeler/cintel-02-data\",\n         target=\"_blank\")\n\n# Data tables\nwith ui.layout_columns():\n    @render.data_frame\n    def data_table():\n        return penguins[penguins[\"species\"].isin(input.selected_species())]\n\n    @render.data_frame\n    def penguins_grid():\n        return penguins                     # full data set\n\n# Histograms side\u2011by\u2011side\nwith ui.layout_columns(gap=\"2rem\"):\n    with ui.card():\n        ui.card_header(\"Plotly Histogram\")\n        @render_plotly\n        def plotly_histogram():\n            df = penguins[penguins[\"species\"].isin(input.selected_species())]\n            fig = px.histogram(\n                df,\n                x=input.selected_attribute(),\n                nbins=input.plotly_bin_count(),\n                color=\"species\",\n                title=f\"{input.selected_attribute()} Histogram by Species\",\n            )\n            fig.update_layout(xaxis_title=input.selected_attribute(),\n                              yaxis_title=\"Count\")\n            return fig\n\n    @render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")\n    def seaborn_histogram():\n                histplot = sns.histplot(data=load_penguins, x=\"body_mass_g\", bins=input.seaborn_bin_count() )\n                histplot.set_title(\"Palmer Penguins\")\n                histplot.set_xlabel(\"Mass (g)\")\n                histplot.set_ylabel(\"Count\")\n                return histplot\n\n# scatterplot\nwith ui.card(full_screen=True):\n    ui.card_header(\"Plotly Scatterplot\")\n    @render_plotly\n    def plotly_scatterplot():\n        df = penguins[penguins[\"species\"].isin(input.selected_species())]\n\n        df = df.dropna(subset=[\"bill_length_mm\", \"body_mass_g\", input.selected_attribute()])\n\n        attr = input.selected_attribute()\n        fig = px.scatter(\n            df,\n            x=attr, y=\"body_mass_g\",\n            color=\"species\", symbol=\"species\",\n            size=\"bill_length_mm\", size_max=6,\n            hover_data=[\"flipper_length_mm\", \"bill_depth_mm\"],\n            title=f\"{attr}\u202fvs\u202fBody\u202fMass\",\n        )\n        fig.update_layout(\n            xaxis_title=attr,\n            yaxis_title=\"Body Mass (g)\",\n            legend_title=\"Species\"\n        )\n        return fig\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    return load_penguins", "type": "text"}]